kernel/fs.c:  memmove(sb, bp->data, sizeof(*sb));
kernel/fs.c:  memset(bp->data, 0, BSIZE);
kernel/fs.c:      if((bp->data[bi/8] & m) == 0){  // Is block free?
kernel/fs.c:        bp->data[bi/8] |= m;  // Mark block in use on disk.
kernel/fs.c:  if((bp->data[bi/8] & m) == 0)
kernel/fs.c:  bp->data[bi/8] &= ~m;  // Mark block free on disk.
kernel/fs.c:// ip->ref counts the number of pointer references to this cached
kernel/fs.c:// When ip->ref falls to zero, the inode is no longer cached.
kernel/fs.c:// ip->ref keeps these unlocked inodes in the cache.
kernel/fs.c:    dip = (struct dinode*)bp->data + inum%IPB;
kernel/fs.c:    if(dip->type == 0){  // a free inode
kernel/fs.c:      dip->type = type;
kernel/fs.c:  bp = bread(ip->dev, IBLOCK(ip->inum));
kernel/fs.c:  dip = (struct dinode*)bp->data + ip->inum%IPB;
kernel/fs.c:  dip->type = ip->type;
kernel/fs.c:  dip->major = ip->major;
kernel/fs.c:  dip->minor = ip->minor;
kernel/fs.c:  dip->nlink = ip->nlink;
kernel/fs.c:  dip->size = ip->size;
kernel/fs.c:  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
kernel/fs.c:    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
kernel/fs.c:      ip->ref++;
kernel/fs.c:    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
kernel/fs.c:  ip->dev = dev;
kernel/fs.c:  ip->inum = inum;
kernel/fs.c:  ip->ref = 1;
kernel/fs.c:  ip->flags = 0;
kernel/fs.c:  ip->ref++;
kernel/fs.c:  if(ip == 0 || ip->ref < 1)
kernel/fs.c:  while(ip->flags & I_BUSY)
kernel/fs.c:  ip->flags |= I_BUSY;
kernel/fs.c:  if(!(ip->flags & I_VALID)){
kernel/fs.c:    bp = bread(ip->dev, IBLOCK(ip->inum));
kernel/fs.c:    dip = (struct dinode*)bp->data + ip->inum%IPB;
kernel/fs.c:    ip->type = dip->type;
kernel/fs.c:    ip->major = dip->major;
kernel/fs.c:    ip->minor = dip->minor;
kernel/fs.c:    ip->nlink = dip->nlink;
kernel/fs.c:    ip->size = dip->size;
kernel/fs.c:    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
kernel/fs.c:    ip->flags |= I_VALID;
kernel/fs.c:    if(ip->type == 0)
kernel/fs.c:  if(ip == 0 || !(ip->flags & I_BUSY) || ip->ref < 1)
kernel/fs.c:  ip->flags &= ~I_BUSY;
kernel/fs.c:  if(ip->ref == 1 && (ip->flags & I_VALID) && ip->nlink == 0){
kernel/fs.c:    if(ip->flags & I_BUSY)
kernel/fs.c:    ip->flags |= I_BUSY;
kernel/fs.c:    ip->type = 0;
kernel/fs.c:    ip->flags = 0;
kernel/fs.c:  ip->ref--;
kernel/fs.c:// are listed in ip->addrs[].  The next NINDIRECT blocks are 
kernel/fs.c:// listed in the block ip->addrs[NDIRECT].
kernel/fs.c:    if((addr = ip->addrs[bn]) == 0)
kernel/fs.c:      ip->addrs[bn] = addr = balloc(ip->dev);
kernel/fs.c:    if((addr = ip->addrs[NDIRECT]) == 0)
kernel/fs.c:      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
kernel/fs.c:    bp = bread(ip->dev, addr);
kernel/fs.c:    a = (uint*)bp->data;
kernel/fs.c:      a[bn] = addr = balloc(ip->dev);
kernel/fs.c:    if(ip->addrs[i]){
kernel/fs.c:      bfree(ip->dev, ip->addrs[i]);
kernel/fs.c:      ip->addrs[i] = 0;
kernel/fs.c:  if(ip->addrs[NDIRECT]){
kernel/fs.c:    bp = bread(ip->dev, ip->addrs[NDIRECT]);
kernel/fs.c:    a = (uint*)bp->data;
kernel/fs.c:        bfree(ip->dev, a[j]);
kernel/fs.c:    bfree(ip->dev, ip->addrs[NDIRECT]);
kernel/fs.c:    ip->addrs[NDIRECT] = 0;
kernel/fs.c:  ip->size = 0;
kernel/fs.c:  st->dev = ip->dev;
kernel/fs.c:  st->ino = ip->inum;
kernel/fs.c:  st->type = ip->type;
kernel/fs.c:  st->nlink = ip->nlink;
kernel/fs.c:  st->size = ip->size;
kernel/fs.c:  if(ip->type == T_DEV){
kernel/fs.c:    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
kernel/fs.c:    return devsw[ip->major].read(ip, dst, n);
kernel/fs.c:  if(off > ip->size || off + n < off)
kernel/fs.c:  if(off + n > ip->size)
kernel/fs.c:    n = ip->size - off;
kernel/fs.c:    bp = bread(ip->dev, bmap(ip, off/BSIZE));
kernel/fs.c:    memmove(dst, bp->data + off%BSIZE, m);
kernel/fs.c:  if(ip->type == T_DEV){
kernel/fs.c:    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
kernel/fs.c:    return devsw[ip->major].write(ip, src, n);
kernel/fs.c:  if(off > ip->size || off + n < off)
kernel/fs.c:    bp = bread(ip->dev, bmap(ip, off/BSIZE));
kernel/fs.c:    memmove(bp->data + off%BSIZE, src, m);
kernel/fs.c:  if(n > 0 && off > ip->size){
kernel/fs.c:    ip->size = off;
kernel/fs.c:  if(dp->type != T_DIR)
kernel/fs.c:  for(off = 0; off < dp->size; off += BSIZE){
kernel/fs.c:    bp = bread(dp->dev, bmap(dp, off / BSIZE));
kernel/fs.c:    for(de = (struct dirent*)bp->data;
kernel/fs.c:        de < (struct dirent*)(bp->data + BSIZE);
kernel/fs.c:          *poff = off + (uchar*)de - bp->data;
kernel/fs.c:        return iget(dp->dev, inum);
kernel/fs.c:  for(off = 0; off < dp->size; off += sizeof(de)){
kernel/fs.c:    if(ip->type != T_DIR){
kernel/mp.c:    if((mp = mpsearch1((uchar*)p-1024, 1024)))
kernel/mp.c:  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
kernel/mp.c:  conf = (struct mpconf*)mp->physaddr;
kernel/mp.c:  if(mp->imcrp){
kernel/pipe.c:  p->readopen = 1;
kernel/pipe.c:  p->writeopen = 1;
kernel/pipe.c:  p->nwrite = 0;
kernel/pipe.c:  p->nread = 0;
kernel/pipe.c:  initlock(&p->lock, "pipe");
kernel/pipe.c:  acquire(&p->lock);
kernel/pipe.c:    p->writeopen = 0;
kernel/pipe.c:    wakeup(&p->nread);
kernel/pipe.c:    p->readopen = 0;
kernel/pipe.c:    wakeup(&p->nwrite);
kernel/pipe.c:  if(p->readopen == 0 && p->writeopen == 0){
kernel/pipe.c:    release(&p->lock);
kernel/pipe.c:    release(&p->lock);
kernel/pipe.c:  acquire(&p->lock);
kernel/pipe.c:    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
kernel/pipe.c:      if(p->readopen == 0 || proc->killed){
kernel/pipe.c:        release(&p->lock);
kernel/pipe.c:      wakeup(&p->nread);
kernel/pipe.c:      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
kernel/pipe.c:    p->data[p->nwrite++ % PIPESIZE] = addr[i];
kernel/pipe.c:  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
kernel/pipe.c:  release(&p->lock);
kernel/pipe.c:  acquire(&p->lock);
kernel/pipe.c:  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
kernel/pipe.c:      release(&p->lock);
kernel/pipe.c:    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
kernel/pipe.c:    if(p->nread == p->nwrite)
kernel/pipe.c:    addr[i] = p->data[p->nread++ % PIPESIZE];
kernel/pipe.c:  wakeup(&p->nwrite);  //DOC: piperead-wakeup
kernel/pipe.c:  release(&p->lock);
kernel/proc.c:    if(p->state == UNUSED)
kernel/proc.c:  p->state = EMBRYO;
kernel/proc.c:  p->pid = nextpid++;
kernel/proc.c:  if((p->kstack = kalloc()) == 0){
kernel/proc.c:    p->state = UNUSED;
kernel/proc.c:  sp = p->kstack + KSTACKSIZE;
kernel/proc.c:  sp -= sizeof *p->tf;
kernel/proc.c:  p->tf = (struct trapframe*)sp;
kernel/proc.c:  sp -= sizeof *p->context;
kernel/proc.c:  p->context = (struct context*)sp;
kernel/proc.c:  memset(p->context, 0, sizeof *p->context);
kernel/proc.c:  p->context->eip = (uint)forkret;
kernel/proc.c:  if((p->pgdir = setupkvm()) == 0)
kernel/proc.c:  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
kernel/proc.c:  p->sz = PGSIZE;
kernel/proc.c:  memset(p->tf, 0, sizeof(*p->tf));
kernel/proc.c:  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
kernel/proc.c:  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
kernel/proc.c:  p->tf->es = p->tf->ds;
kernel/proc.c:  p->tf->ss = p->tf->ds;
kernel/proc.c:  p->tf->eflags = FL_IF;
kernel/proc.c:  p->tf->esp = PGSIZE;
kernel/proc.c:  p->tf->eip = 0;  // beginning of initcode.S
kernel/proc.c:  safestrcpy(p->name, "initcode", sizeof(p->name));
kernel/proc.c:  p->cwd = namei("/");
kernel/proc.c:  p->state = RUNNABLE;
kernel/proc.c:  if((np->pgdir = copyuvm(proc->pgdir, proc->sz)) == 0){
kernel/proc.c:    kfree(np->kstack);
kernel/proc.c:    np->kstack = 0;
kernel/proc.c:    np->state = UNUSED;
kernel/proc.c:  np->sz = proc->sz;
kernel/proc.c:  np->parent = proc;
kernel/proc.c:  *np->tf = *proc->tf;
kernel/proc.c:  np->tf->eax = 0;
kernel/proc.c:      np->ofile[i] = filedup(proc->ofile[i]);
kernel/proc.c:  np->cwd = idup(proc->cwd);
kernel/proc.c:  pid = np->pid;
kernel/proc.c:  np->state = RUNNABLE;
kernel/proc.c:  safestrcpy(np->name, proc->name, sizeof(proc->name));
kernel/proc.c:    if(p->parent == proc){
kernel/proc.c:      p->parent = initproc;
kernel/proc.c:      if(p->state == ZOMBIE)
kernel/proc.c:      if(p->parent != proc)
kernel/proc.c:      if(p->state == ZOMBIE){
kernel/proc.c:        pid = p->pid;
kernel/proc.c:        kfree(p->kstack);
kernel/proc.c:        p->kstack = 0;
kernel/proc.c:        freevm(p->pgdir);
kernel/proc.c:        p->state = UNUSED;
kernel/proc.c:        p->pid = 0;
kernel/proc.c:        p->parent = 0;
kernel/proc.c:        p->name[0] = 0;
kernel/proc.c:        p->killed = 0;
kernel/proc.c:      if(p->state != RUNNABLE)
kernel/proc.c:      p->state = RUNNING;
kernel/proc.c:      // It should have changed its p->state before coming back.
kernel/proc.c:  // change p->state and then call sched.
kernel/proc.c:    if(p->state == SLEEPING && p->chan == chan)
kernel/proc.c:      p->state = RUNNABLE;
kernel/proc.c:    if(p->pid == pid){
kernel/proc.c:      p->killed = 1;
kernel/proc.c:      if(p->state == SLEEPING)
kernel/proc.c:        p->state = RUNNABLE;
kernel/proc.c:    if(p->state == UNUSED)
kernel/proc.c:    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
kernel/proc.c:      state = states[p->state];
kernel/proc.c:    cprintf("%d %s %s", p->pid, state, p->name);
kernel/proc.c:    if(p->state == SLEEPING){
kernel/proc.c:      getcallerpcs((uint*)p->context->ebp+2, pc);
kernel/syscall.c:  if(addr >= p->sz || addr+4 > p->sz)
kernel/syscall.c:  if(addr >= p->sz)
kernel/syscall.c:  ep = (char*)p->sz;
kernel/sysfile.c:  if(ip->type == T_DIR){
kernel/sysfile.c:  ip->nlink++;
kernel/sysfile.c:  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
kernel/sysfile.c:  ip->nlink--;
kernel/sysfile.c:  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
kernel/sysfile.c:  if(ip->nlink < 1)
kernel/sysfile.c:  if(ip->type == T_DIR && !isdirempty(ip)){
kernel/sysfile.c:  if(ip->type == T_DIR){
kernel/sysfile.c:    dp->nlink--;
kernel/sysfile.c:  ip->nlink--;
kernel/sysfile.c:    if(type == T_FILE && ip->type == T_FILE)
kernel/sysfile.c:  if((ip = ialloc(dp->dev, type)) == 0)
kernel/sysfile.c:  ip->major = major;
kernel/sysfile.c:  ip->minor = minor;
kernel/sysfile.c:  ip->nlink = 1;
kernel/sysfile.c:    dp->nlink++;  // for ".."
kernel/sysfile.c:    // No ip->nlink++ for ".": avoid cyclic ref count.
kernel/sysfile.c:    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
kernel/sysfile.c:  if(dirlink(dp, name, ip->inum) < 0)
kernel/sysfile.c:    if(ip->type == T_DIR && omode != O_RDONLY){
kernel/sysfile.c:  if(ip->type != T_DIR){
kernel/vm.c:  if(p->pgdir == 0)
kernel/vm.c:  lcr3(PADDR(p->pgdir));  // switch to new address space
tools/mkfs.d: /usr/include/x86_64-linux-gnu/bits/byteswap-16.h \
user/ls.c:  for(p=path+strlen(path); p >= path && *p != '/'; p--)
user/umalloc.c:  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
user/umalloc.c:    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
user/umalloc.c:  if(bp + bp->s.size == p->s.ptr){
user/umalloc.c:    bp->s.size += p->s.ptr->s.size;
user/umalloc.c:    bp->s.ptr = p->s.ptr->s.ptr;
user/umalloc.c:    bp->s.ptr = p->s.ptr;
user/umalloc.c:  if(p + p->s.size == bp){
user/umalloc.c:    p->s.size += bp->s.size;
user/umalloc.c:    p->s.ptr = bp->s.ptr;
user/umalloc.c:    p->s.ptr = bp;
user/umalloc.c:  hp->s.size = nu;
user/umalloc.c:  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
user/umalloc.c:    if(p->s.size >= nunits){
user/umalloc.c:      if(p->s.size == nunits)
user/umalloc.c:        prevp->s.ptr = p->s.ptr;
user/umalloc.c:        p->s.size -= nunits;
user/umalloc.c:        p += p->s.size;
user/umalloc.c:        p->s.size = nunits;
